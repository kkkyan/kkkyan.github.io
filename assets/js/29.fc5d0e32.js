(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{114:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("对Redis有一定了解的人一定听过"),a("strong",[s._v("SDS")]),s._v("与"),a("strong",[s._v("柔性数组")]),s._v("，它们是Redis工作高效的秘密之一，本文主要介绍SDS的实现以及相比于传统字符串"),a("code",[s._v("char*")]),s._v("的优势。")]),s._v(" "),a("h2",{attrs:{id:"sds-基础结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sds-基础结构"}},[s._v("#")]),s._v(" SDS 基础结构")]),s._v(" "),a("p",[s._v("简单动态字符串(SDS, Simple Dynamic Strings) 是Redis基本数据结构之一，Redis内大量数据都是以字符串形式储存的，因此一个高效且安全的数据存储结构尤为重要。")]),s._v(" "),a("p",[s._v("SDS结构经过了几次演变，基础数据结构由三部分构成：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sds")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//buf占用字节数")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" free"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// buf中剩余字节数")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 真正储存字符串的数据空间")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("其中"),a("code",[s._v("len")]),s._v("和"),a("code",[s._v("free")]),s._v("是SDS的固定头部，用于标识数据空间的总大小和剩余大小；"),a("code",[s._v("buf")]),s._v("被称为"),a("strong",[s._v("柔性数组")]),s._v("，用于储存字符串。")]),s._v(" "),a("p",[s._v("之所以用柔性数组存放字符串，是因为柔性数组的地址和结构体是连续的，这样查找内存更快（因为不需要额外通过指针找到字符串的位置）；可以很方便地通过柔性数组的首地址偏移得到结构体首地址，进而能很方便地获取其余变量。")]),s._v(" "),a("h2",{attrs:{id:"sds-对比char-的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sds-对比char-的优点"}},[s._v("#")]),s._v(" SDS 对比char*的优点")]),s._v(" "),a("h3",{attrs:{id:"_1-防止缓冲区溢出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-防止缓冲区溢出"}},[s._v("#")]),s._v(" 1. 防止缓冲区溢出")]),s._v(" "),a("p",[s._v("SDS 相比于普通字符串 char*， 多了标示其长度和剩余空间的属性，当我们对SDS进行修改、追加、合并等操作时，可以很轻松的进行边界检查，防止操作越界产生错误。")]),s._v(" "),a("h3",{attrs:{id:"_2-二进制安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-二进制安全"}},[s._v("#")]),s._v(" 2. 二进制安全")]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("什么是二进制安全？")])]),s._v(" "),a("p",[s._v("通俗地讲，C语言中，用“\\0”表示字符串的结束，如果字符串中本身就有“\\0”字符，字符串就会被截断，即非二进制安全；若通过某种机制，保证读写字符串时不损害其内容，则是二进制安全。")])]),s._v(" "),a("p",[s._v("SDS 通过边界属性的设置，巧妙的实现了二进制安全：SDS对内容结束的检查不再依赖于'\\0'，而是通过对"),a("code",[s._v("len")]),s._v("和"),a("code",[s._v("free")]),s._v("的计算，实现内容的读取。由于有长度统计变量len的存在，读写字符串时不依赖“\\0”终止符，保证了二进制安全。")]),s._v(" "),a("h3",{attrs:{id:"_3-获取字符串长度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-获取字符串长度"}},[s._v("#")]),s._v(" 3. 获取字符串长度")]),s._v(" "),a("p",[s._v("一个显而易见的优点是，SDS可以在O(1)时间复杂度直接返回字符串的长度（char* 是 O(n)，必须遍历到末尾)。")]),s._v(" "),a("h3",{attrs:{id:"_4-空间预分配-与-惰性释放"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-空间预分配-与-惰性释放"}},[s._v("#")]),s._v(" 4. 空间预分配 与 惰性释放")]),s._v(" "),a("p",[a("strong",[s._v("空间预分配")]),s._v("与"),a("strong",[s._v("惰性释放")]),s._v("是基于SDS特点实现的，SDS中柔性数组的容量和字符串的长度可以是不一致的，基于这一特点，可以提前分配一定的储存空间，或是当字符串长度变小时仅修改其内容而不回收储存空间，减少因空间分配带来的额外消耗，提高程序的性能。")]),s._v(" "),a("h2",{attrs:{id:"sds的改进"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sds的改进"}},[s._v("#")]),s._v(" SDS的改进")]),s._v(" "),a("h3",{attrs:{id:"_1-头部优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-头部优化"}},[s._v("#")]),s._v(" 1. 头部优化")]),s._v(" "),a("p",[s._v("分析SDS的数据结构我们还可以对其进一步优化：如果我们储存字符串的长度大部分时间都不超过1个字节，甚至是2个字节，那么此时SDS的头部数据（2个int, 8字节）反而成为占用空间较大的部分。如果每个字符串不论大小，其头部都占用了8个字节，那对内存的使用效率就太低了。")]),s._v(" "),a("p",[s._v("Redis "),a("code",[s._v("PR#2509")]),s._v("在SDS的基础上做了进一步改进，将SDS分为5类：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* Note: sdshdr5 is never used, we just access the flags byte directly.\n* However is here to document the layout of type 5 SDS strings. */")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("__attribute__")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("__packed__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" sdshdr5 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 3 lsb of type, and 5 msb of string length */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("__attribute__")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("__packed__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" sdshdr8 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    uint8_t len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* used */")]),s._v("\n    uint8_t alloc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* excluding the header and null terminator */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 3 lsb of type, 5 unused bits */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("__attribute__")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("__packed__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" sdshdr16 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    uint16_t len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* used */")]),s._v("\n    uint16_t alloc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* excluding the header and null terminator */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 3 lsb of type, 5 unused bits */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("__attribute__")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("__packed__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" sdshdr32 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    uint32_t len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* used */")]),s._v("\n    uint32_t alloc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* excluding the header and null terminator */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 3 lsb of type, 5 unused bits */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("__attribute__")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("__packed__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" sdshdr64 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    uint64_t len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* used */")]),s._v("\n    uint64_t alloc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* excluding the header and null terminator */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 3 lsb of type, 5 unused bits */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("p",[s._v("改进后的SDS：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("增加了一个"),a("code",[s._v("flags")]),s._v("用于区别不同的类型（"),a("code",[s._v("char")]),s._v("类型，低3位用于区别不同的结构，高5位暂未使用）；")])]),s._v(" "),a("li",[a("p",[s._v("将"),a("code",[s._v("free")]),s._v("未使用空间改为了"),a("code",[s._v("alloc")]),s._v("已分配空间；")])]),s._v(" "),a("li",[a("p",[s._v("不同类型之间主要是字符串长度的区别：sdshdr8用8位变量储存长度和分配空间，字符串长度最大为2^8-1 = 63，整个结构体头部只有3字节，sdshdr5头部只有1字节等等；")])])]),s._v(" "),a("h3",{attrs:{id:"_2-内存分配空间优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-内存分配空间优化"}},[s._v("#")]),s._v(" 2. 内存分配空间优化")]),s._v(" "),a("p",[s._v("源码中每个结构体都有一个"),a("code",[s._v("__packed__")]),s._v("标记。一般情况下，结构体会按其所有变量大小的最小公倍数做字节对齐，**而用packed修饰后，结构体则变为按1字节对齐。**1字节对齐带来的好处是巨大的：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://oss.kkyan.cn/image-20200215002330155.png",alt:"image-20200215002330155"}})]),s._v(" "),a("p",[a("strong",[s._v("SDS结构体返回给上层的并非是结构体地址，而是buf地址")]),s._v("。因此按照1字节对齐后，不仅可以节省内存；而且可以根据buf-1直接获取flags地址，并通过类型计算得到结构体地址。若没有packed的修饰，还需要对不同结构进行处理，实现更复杂。")]),s._v(" "),a("h3",{attrs:{id:"_3-增加了柔性数组容量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-增加了柔性数组容量"}},[s._v("#")]),s._v(" 3. 增加了柔性数组容量")]),s._v(" "),a("p",[s._v("基础的SDS只能储存最多 2^32 -1 个字符，字符串上限是 2^32 Bytes = 4GB")]),s._v(" "),a("p",[s._v("现在最大的sdshdr64 提供了 2^64 Bytes = 16 GB 字符串容量")]),s._v(" "),a("h2",{attrs:{id:"sds-扩容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sds-扩容"}},[s._v("#")]),s._v(" SDS 扩容")]),s._v(" "),a("p",[s._v("当我们对SDS执行合并、追加等操作时，可能会发生字符串长度大于柔性数组长度的情况，这时候就要进行扩容。")]),s._v(" "),a("p",[s._v("SDS扩容有以下几个规则：")]),s._v(" "),a("ol",[a("li",[s._v("如果SDS中剩余长度大于新增内容长度，直接在柔性数组末尾添加，不进行扩容；")]),s._v(" "),a("li",[s._v("如果新增后的总长度 < 1MB，按照"),a("strong",[s._v("新增长度的2倍进行扩容")]),s._v("；")]),s._v(" "),a("li",[s._v("如果新增后的总长度 >= 1MB, 按照"),a("strong",[s._v("新长度+1MB进行扩容")]),s._v("；")])]),s._v(" "),a("p",[s._v("如果扩容后数据类型不再满足当前需求，则需要重新开辟地址，将原buf内容移到新的位置。")]),s._v(" "),a("p",[s._v("总的来说，SDS通过添加统计变量的方法，提高了字符串储存的安全性与效率，以空间换取时间，使诸多操作达到了O(1)级别，大幅提高了程序的运行效率。")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("参考资料： 《Redis5 设计与源码分析》")])])}),[],!1,null,null,null);t.default=e.exports}}]);