(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{110:function(s,_,e){"use strict";e.r(_);var t=e(2),a=Object(t.a)({},(function(){var s=this,_=s.$createElement,e=s._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("Tensorflow 拥有 Debug 功能，但其繁琐的调试流程让不少人望而却步。")]),s._v(" "),e("p",[s._v("目前 Tensorbaord 提供了可视化 Tensorflow Debug 界面 (tfdbg GUI)，本文简单介绍一下使用 TensorBoard 进行调试步骤。")]),s._v(" "),e("p",[s._v("测试环境:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("tensorflow==1.12.0\ntensorboard==1.12.0\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"启动-tensorboard-debug-监听"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动-tensorboard-debug-监听"}},[s._v("#")]),s._v(" 启动 Tensorboard Debug 监听")]),s._v(" "),e("p",[s._v("向 TensorBoard 添加 "),e("code",[s._v("--debugger_port")]),s._v(" 可以为 TensorBoard 启动 debug 监听:")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("tensorboard --logir ./ --port "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10001")]),s._v(" --debugger_port "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("此时打开 tensorboard 界面会出现：")]),s._v(" "),e("p",[e("img",{attrs:{src:"http://oss.kkyan.cn/20190319111142.png",alt:""}})]),s._v(" "),e("p",[s._v("界面中介绍了不同方式启动 Debug 的方法。")]),s._v(" "),e("h2",{attrs:{id:"使用-debug-封装会话-session"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-debug-封装会话-session"}},[s._v("#")]),s._v(" 使用 Debug 封装会话 Session")]),s._v(" "),e("p",[s._v("Tensorflow Debug  "),e("code",[s._v("tfdbg")]),s._v("  位于 "),e("code",[s._v("tensorflow.python")]),s._v(" 包中：")]),s._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" tensorflow"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("python "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" debug "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" tf_debug\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("要使用调试，首先需要对 "),e("code",[s._v("sess")]),s._v(" 进行封装，TensorBoard Debug 封装方法如下：")]),s._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[s._v("sess "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Session"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nsess "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tf_debug"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("TensorBoardDebugWrapperSession"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"your remote tensorboard ip"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("对于 "),e("code",[s._v("Keras")]),s._v(", "),e("code",[s._v("Estamator")]),s._v(" 等高级接口，可以使用对应 Hook 进行封装，如 "),e("code",[s._v("Keras")]),s._v(" :")]),s._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[s._v("tf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("keras"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("backend"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("set_session"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tf_debug"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("TensorBoardDebugWrapperSession"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Session"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"your remote tensorboard ip"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("代码方面工作完成。")]),s._v(" "),e("h2",{attrs:{id:"运行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行"}},[s._v("#")]),s._v(" 运行")]),s._v(" "),e("p",[s._v("这里我使用 Keras 建立一个 BiLSTM 的二分类模型：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Layer (type)                 Output Shape              Param #   =================================================================\nword_input (InputLayer)      (None, 30)                0         \n_________________________________________________________________\nword_embedding (Embedding)   (None, 30, 200)           16639200  \n_________________________________________________________________\nbidirectional_2 (Bidirection (None, 300)               421200    \n_________________________________________________________________\ndense_2 (Dense)              (None, 3)                 903       \n=================================================================\nTotal params: 17,061,303\nTrainable params: 422,103\nNon-trainable params: 16,639,200\n_________________________________________________________________\nNone\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("使用 "),e("code",[s._v("model.fit()")]),s._v(" 运行后，Tensorboard 输出：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://oss.kkyan.cn/20190319112010.png",alt:""}})]),s._v(" "),e("p",[s._v("在 GUI 界面可以看到，左侧有 Nodes 列表，当前 Session 运行的 ops; 屏幕右侧上方是 model 的 tensor 图，可以查看不同 node 的连接方式，以及 node 在 devices 的运行情况，下方是 Tensor Value 观察窗口。")]),s._v(" "),e("h3",{attrs:{id:"断点设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#断点设置"}},[s._v("#")]),s._v(" 断点设置")]),s._v(" "),e("p",[s._v("勾选对应的 Node 节点，即可设置相应断点，当计算运行至对应节点后自动停止，为了查看各个向量的变换情况，我们选择 Dense 最后输出 softmax 来看一下：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://oss.kkyan.cn/20190319151854.png",alt:""}})]),s._v(" "),e("p",[s._v("这里展示了选择变量的类型，大小，值和 health pill.")]),s._v(" "),e("p",[s._v("Health pill 展示了该向量在6种 Legend (Nan, -∞, -, 0, +, +∞) 的所占比例情况，用户帮助用户判断向量的变换是否正常。这里我们展示的是 Softmax, 因此一定是 + 的。")]),s._v(" "),e("h3",{attrs:{id:"向量可视化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#向量可视化"}},[s._v("#")]),s._v(" 向量可视化")]),s._v(" "),e("p",[s._v("点击对应向量的 "),e("code",[s._v("Click to view")]),s._v(" 可以查看当前向量的可视化数据：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://oss.kkyan.cn/20190319155407.png",alt:""}})]),s._v(" "),e("p",[s._v("右侧的可视化依旧对应6个 Legend.")]),s._v(" "),e("h4",{attrs:{id:"slicing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#slicing"}},[s._v("#")]),s._v(" Slicing")]),s._v(" "),e("p",[s._v("左侧 Slice 用于切片向量数据，这里使用 "),e("a",{attrs:{href:"https://docs.scipy.org/doc/numpy-1.13.0/reference/arrays.indexing.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("numpy-style slicing"),e("OutboundLink")],1),s._v(" 进行切片：如我们的 [384, 3] 的数据，"),e("code",[s._v("[::5, ::]")]),s._v(" 表示每 5 个向量进行一次切片，每个向量取全部的3个维度。（即在第一个 dimension 每5个 indices 取一次，在第二个 dimension 每1个 indices 取一次[全取]）")]),s._v(" "),e("h4",{attrs:{id:"time-indices"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#time-indices"}},[s._v("#")]),s._v(" Time indices")]),s._v(" "),e("p",[s._v("这里引用 TensorBoard 说明原文，一般来说使用 -1 即可:")]),s._v(" "),e("blockquote",[e("p",[s._v("For each tensor, the time axis (history of the tensor's execution) is treated as an 1D array. Numpy-style slicing can be applied to time. For example, the default slicing of "),e("code",[s._v("-1")]),s._v(" selects the most recent value. However, if the user changes that slicing parameter to "),e("code",[s._v(":")]),s._v(", the full history of the tensor will be shown (and the rank of the tensor being visualized is increased by 1).")])]),s._v(" "),e("h2",{attrs:{id:"其他注意事项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他注意事项"}},[s._v("#")]),s._v(" 其他注意事项")]),s._v(" "),e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),e("p",[s._v("目前 TensorBoard debug 暂不支持多用户连接访问。我在使用 jupyter 时会出现各种连接问题，尽量使用 py 文件运行，调试结束后 "),e("code",[s._v("Ctrl + C")]),s._v(" 断开重新运行即可")])])])}),[],!1,null,null,null);_.default=a.exports}}]);